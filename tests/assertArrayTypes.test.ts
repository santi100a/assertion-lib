// Generated by CodiumAI

import assertArrayTypes = require('../cjs/array-types');
import { type Type } from '../cjs/core';

describe('assertArrayTypes', () => {
	// Asserts that values and types arrays of the same length have matching types.
	it('should assert that values and types arrays of the same length have matching types', () => {
		const values = [1, 'two', true];
		const types: Type[] = ['number', 'string', 'boolean'];
		expect(() => assertArrayTypes(values, types)).not.toThrow();
	});

	// Asserts that values and types arrays of length 0 are valid.
	it('should assert that values and types arrays of length 0 are valid', () => {
		const values: unknown[] = [];
		const types: Type[] = [];
		expect(() => assertArrayTypes(values, types)).not.toThrow();
	});

	// Asserts that values and types arrays of length 1 are valid.
	it('should assert that values and types arrays of length 1 are valid', () => {
		const values = [1];
		const types: Type[] = ['number'];
		expect(() => assertArrayTypes(values, types)).not.toThrow();
	});

	// Asserts that an empty values array with a non-empty types array is invalid.
	it('should assert that an empty values array with a non-empty types array is invalid', () => {
		const values: unknown[] = [];
		const types: Type[] = ['number'];
		expect(() => assertArrayTypes(values, types)).toThrow(TypeError);
	});

	// Asserts that a non-empty values array with an empty types array is invalid.
	it('should assert that a non-empty values array with an empty types array is invalid', () => {
		const values = [1];
		const types: Type[] = [];
		expect(() => assertArrayTypes(values, types)).toThrow(TypeError);
	});

	// Asserts that a values array with a length different from the types array is invalid.
	it('should assert that a values array with a length different from the types array is invalid', () => {
		const values = [1, 'two'];
		const types: Type[] = ['number'];
		expect(() => assertArrayTypes(values, types)).toThrow(TypeError);
	});
});
