// Generated by CodiumAI
import { Type } from '../cjs/core';
import assertOneOfTypes = require('../cjs/one-of-types');

describe('assertOneOfTypes', () => {
	// Asserts that a value of type 'string' matches the specified types.
	it('should assert that a value of type string matches the specified types', () => {
		const value = 'hello';
		const types: Type[] = ['string', 'number'];
		expect(() => assertOneOfTypes(value, types)).not.toThrow();
	});

	// Asserts that a value of type 'number' matches the specified types.
	it('should assert that a value of type number matches the specified types', () => {
		const value = 42;
		const types: Type[] = ['number', 'boolean'];
		expect(() => assertOneOfTypes(value, types)).not.toThrow();
	});

	// Asserts that a value of type 'bigint' matches the specified types.
	it('should assert that a value of type bigint matches the specified types', () => {
		const value = BigInt(123);
		const types: Type[] = ['bigint', 'symbol'];
		expect(() => assertOneOfTypes(value, types)).not.toThrow();
	});

	// Throws a TypeError if the provided types array is empty.
	it('should throw a TypeError if the provided types array is empty', () => {
		const value = 'hello';
		const types: Type[] = [];
		expect(() => assertOneOfTypes(value, types)).toThrow(TypeError);
	});

	// Throws a TypeError if the provided types array contains an invalid type.
	it('should throw a TypeError if the provided types array contains an invalid type', () => {
		const value = 'hello';
		const types: string[] = ['string', 'number', 'invalid'];
		expect(() => assertOneOfTypes(value, types as Type[])).toThrow(TypeError);
	});

	// Throws a TypeError if the type of the value is not in the provided types array.
	it('should throw a TypeError if the type of the value is not in the provided types array', () => {
		const value = 'hello';
		const types: Type[] = ['number', 'boolean'];
		expect(() => assertOneOfTypes(value, types)).toThrow(TypeError);
	});
});
