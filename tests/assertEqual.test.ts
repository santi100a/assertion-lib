// Generated by CodiumAI
import assertEqual = require('../cjs/equal');

describe('assertEqual', () => {
	// Asserts that two equal values of the same type do not throw an error.
	it('should not throw an error when comparing two equal values of the same type', () => {
		expect(() => {
			assertEqual(1, 1);
		}).not.toThrow();
	});

	// Asserts that two equal values of different types throw an error.
	it('should not throw an error when comparing two equal values of different types', () => {
		expect(() => {
			assertEqual(1, '1');
		}).toThrow(
			/"a" must be equal to "b". Got "1" \(of type "number"\) and "1" \(of type "string"\)\./
		);
	});

	// Asserts that two equal values with custom names do not throw an error.
	it('should not throw an error when comparing two equal values with custom names', () => {
		expect(() => {
			assertEqual(1, 1, 'value1', 'value2');
		}).not.toThrow();
	});

	// Asserts that two different values of the same type throw a TypeError.
	it('should throw a TypeError when comparing two different values of the same type', () => {
		expect(() => {
			assertEqual(1, 2);
		}).toThrow(
			/"a" must be equal to "b". Got "1" \(of type "number"\) and "2" \(of type "number"\)\./
		);
	});

	// Asserts that two different values of different types throw a TypeError.
	it('should throw a TypeError when comparing two different values of different types', () => {
		expect(() => {
			assertEqual(1, '2');
		}).toThrow(
			/"a" must be equal to "b". Got "1" \(of type "number"\) and "2" \(of type "string"\)\./
		);
	});

	// Asserts that two different values with custom names throw a TypeError.
	it('should throw a TypeError when comparing two different values with custom names', () => {
		expect(() => {
			assertEqual(1, 2, 'value1', 'value2');
		}).toThrow(
			/"value1" must be equal to "value2". Got "1" \(of type "number"\) and "2" \(of type "number"\)\./
		);
	});
});
