// Generated by CodiumAI

import assertValidNumber = require('../cjs/valid-number');

describe('assertValidNumber', () => {

    // Should not throw an error when given a valid number.
    it('should not throw an error when given a valid number', () => {
      expect(() => assertValidNumber(5)).not.toThrow();
    });

    // Should not throw an error when given the minimum number value.
    it('should not throw an error when given the minimum number value', () => {
      expect(() => assertValidNumber(Number.MIN_VALUE)).not.toThrow();
    });

    // Should not throw an error when given the maximum number value.
    it('should not throw an error when given the maximum number value', () => {
      expect(() => assertValidNumber(Number.MAX_VALUE)).not.toThrow();
    });

    // Should throw a TypeError when given NaN.
    it('should throw a TypeError when given NaN', () => {
      expect(() => assertValidNumber(NaN)).toThrow(TypeError);
    });

    // Should not throw an error when given positive infinity.
    it('should not throw an error when given positive infinity', () => {
      expect(() => assertValidNumber(Number.POSITIVE_INFINITY)).not.toThrow();
    });

    // Should not throw an error when given negative infinity.
    it('should not throw an error when given negative infinity', () => {
      expect(() => assertValidNumber(Number.NEGATIVE_INFINITY)).not.toThrow();
    });
});
